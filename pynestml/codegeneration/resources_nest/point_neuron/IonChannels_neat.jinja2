#ifndef IONCHANNELS_NEAT_H
#define IONCHANNELS_NEAT_H

#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <complex>
#include <tuple>
#include <numeric>
#include <cmath>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
#include <math.h>
#include <time.h>

#include "nest_time.h"

namespace nest{


class IonChannel{
public:
    virtual void init(){};

    virtual void reset(){};
    virtual void update(){};
    virtual void add_spike(){};
    virtual std::pair< double, double > f_numstep( const double v_comp ){ return std::make_pair( 0., 0. ); };
};

// ------- in python --------
all_channels = []
for diff_eq in neuron.equations_block().get_odes():
    if "_channel" in diff_eq.get_complete_name():
        all_channels.append(diff_eq)
// ------- in python --------


// -------- in nestml -------
neuron iaf_neat:

parameters:
  C_m pF = ...
end

equations:
  m_channel' = -m_channel / 42 + 1
end

end
// -------- in nestml -------


{% for channel in all_channels %}
class {{channel.get_complete_name()}}: public IonChannel{
protected:
    // step for AP
    double m_g_step = 0.0;
    // reversal of ion channel
    double m_e_r = 0.;
    // conductance g
    double m_g_r = 0.0, m_g_d = 0.0;
    double m_g = 0.0;
    // time scales window
    double m_tau_r = .2, m_tau_d = 3.;
    double m_norm;
    // propagators
    double m_p_r = 0.0, m_p_d = 0.0;

public:
    FakeChannel(){set_params(.1, 1., 0., 1.);};
    FakeChannel(double tau_r, double tau_d, double e_r, double g_step);

    void init() override;
    void set_params(double tau_r, double tau_d, double e_r, double g_step);

    void reset() override {m_g = 0.0;};
    void add_spike() override;

    void update(){
      {{printer.print_expression(channel.get_rhs())}}
    };



    std::pair< double, double > f_numstep(const double v_comp) override;
};
{% endfor %}

} // namespace

#endif /* #ifndef IONCHANNELS_NEAT_H */

