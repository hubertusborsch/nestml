"""
Name: stdp_nn_restr_symmetric - Synapse type for spike-timing dependent plasticity, with nearest-neighbour spike pairing.

Description:

stdp_synapse is a synapse with spike time dependent plasticity (as defined in [1]). The weight dependence exponent can be set separately for potentiation and depression; see [stdp](stdp_synapse.nestml) for detailed information and references.

This synapse model extends the [stdp](stdp_synapse.nestml) model by restrictions on interactions between pre- and post spikes.

This variant corresponds to panel 7C in [1].

Symmetric: each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (fig. 7A in [1])

.. figure:: ../doc/fig/stdp-nearest-neighbour.png
   
   Figure 7 from Morrison, Diesmann and Gerstner

   Original caption:

   Phenomenological models of synaptic plasticity based on spike timing", Biological Cybernetics 98 (2008). "Examples of nearest neighbor spike pairing schemes for a pre-synaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. **(a)** Symmetric interpretation: each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). **(b)** Presynaptic centered interpretation: each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). **(c)** Reduced symmetric interpretation: as in **(b)** but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006)

SeeAlso: stdp
"""
synapse stdp_nn_restr_symm:

  state:
    w real = 1.
    pre_trace real = 0.
    post_trace real = 0.
    pre_handled boolean = True
  end

  parameters:
    the_delay ms = 1 ms  @nest::delay   # !!! cannot have a variable called "delay"
    lambda real = .01
    tau_tr_pre ms = 20 ms
    tau_tr_post ms = 20 ms
    alpha real = 1.
    mu_plus real = 1.
    mu_minus real = 1.
    Wmax real = 100.
    Wmin real = 0.
  end

  equations:
    # nearest-neighbour trace of presynaptic neuron
    pre_trace' = -pre_trace / tau_tr_pre

    # nearest-neighbour trace of postsynaptic neuron
    post_trace' = -post_trace / tau_tr_post
  end

  input:
    pre_spikes nS <- spike
    post_spikes nS <- spike
  end

  output: spike

  onReceive(post_spikes):
    post_trace = 1

    # potentiate synapse
    if not pre_handled:
      w_ real = Wmax * ( w / Wmax  + (lambda * ( 1. - ( w / Wmax ) )**mu_plus * pre_trace ))
      w = min(Wmax, w_)
      pre_handled = True
    end
  end

  onReceive(pre_spikes):
    pre_trace = 1

    # depress synapse
    if pre_handled:
      w_ real = Wmax * ( w / Wmax  - ( alpha * lambda * ( w / Wmax )**mu_minus * post_trace ))
      w = max(Wmin, w_)
    end

    pre_handled = False

    # deliver spike to postsynaptic partner
    deliver_spike(w, the_delay)
  end
  
end
