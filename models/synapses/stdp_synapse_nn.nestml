"""
Name: stdp_nn - Synapse type for spike-timing dependent plasticity, with nearest-neighbour spike pairing.

Description:

stdp_synapse is a synapse with spike time dependent plasticity (as defined in [1]). The weight dependence exponent can be set separately for potentiation and depression; see [stdp](stdp_synapse.nestml) for detailed information and references.

This synapse model extends the [stdp](stdp_synapse.nestml) model by restrictions on interactions between pre- and post spikes.

.. figure:: ../doc/fig/stdp-nearest-neighbour.png
   
   Figure 7 from Morrison, Diesmann and Gerstner

   Original caption:

   Phenomenological models of synaptic plasticity based on spike timing", Biological Cybernetics 98 (2008). "Examples of nearest neighbor spike pairing schemes for a pre-synaptic neuron j and a postsynaptic neuron i. In each case, the dark gray indicate which pairings contribute toward depression of a synapse, and light gray indicate which pairings contribute toward potentiation. **(a)** Symmetric interpretation: each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (Morrison et al. 2007). **(b)** Presynaptic centered interpretation: each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (Izhikevich and Desai 2003; Burkitt et al. 2004: Model II). **(c)** Reduced symmetric interpretation: as in **(b)** but only for immediate pairings (Burkitt et al. 2004: Model IV, also implemented in hardware by Schemmel et al. 2006)

SeeAlso: stdp
"""
synapse stdp_nn:

  state:
    w nS = 1.234 nS
    pre_handled boolean = True
    pre_trace real = 0.
    post_trace real = 0.
  end

  parameters:
    the_delay ms = 1 ms  @nest::delay   # !!! cannot have a variable called "delay"
    lambda real = .01
    tau_tr_pre ms = 20 ms
    tau_tr_post ms = 20 ms
    alpha real = 1.
    mu_plus real = 1.
    mu_minus real = 1.
    Wmax nS = 100 nS
    Wmin nS = 0 nS
    
    ALL_TO_ALL integer = 0      # Typical STDP: all pre spikes paired with all post spikes
    NEAREST_NEIGHBOUR_SYMMETRIC integer = 1    # Symmetric: each presynaptic spike is paired with the last postsynaptic spike, and each postsynaptic spike is paired with the last presynaptic spike (fig. 7A in [1])
    NEAREST_NEIGHBOUR_RESTRICTED_SYMMETRIC integer = 2    # Reduced symmetric interpretation: as in `NEAREST_NEIGHBOUR_SYMMETRIC`, but only for immediate pairings(fig. 7C in [1])
    NEAREST_NEIGHBOUR_PRESYN_CENTERED integer = 3    # Presynaptic centered interpretation: each presynaptic spike is paired with the last postsynaptic spike and the next postsynaptic spike (fig. 7B in [1])
    
    nearest_neighbour_behaviour integer = NEAREST_NEIGHBOUR_RESTRICTED_SYMMETRIC
  end

  equations:
    pre_trace' = -pre_trace / tau_tr_pre
    post_trace' = -post_trace / tau_tr_post
  end

  input:
    pre_spikes nS <- spike
    post_spikes nS <- spike
  end

  output: spike

  onReceive(post_spikes):
    if nearest_neighbour_behaviour == ALL_TO_ALL:
      post_trace += 1.
    else:
      post_trace = 1.
    end

    # potentiate synapse
    skip boolean = (nearest_neighbour_behaviour == NEAREST_NEIGHBOUR_RESTRICTED_SYMMETRIC) and pre_handled    
    if not skip:
        w_ nS = Wmax * ( w / Wmax  + (lambda * ( 1. - ( w / Wmax ) )**mu_plus * pre_trace ))
        w = min(Wmax, w_)
        
        if nearest_neighbour_behaviour == NEAREST_NEIGHBOUR_PRESYN_CENTERED:
            # According to the presynaptic-centered nearest-neighbour scheme, a postsynaptic spike erases the state of the synapse, and all the preceding presynaptic spikes are forgotten.
            pre_trace = 0
        end
        
        pre_handled = True
    end
  end

  onReceive(pre_spikes):
    if nearest_neighbour_behaviour == NEAREST_NEIGHBOUR_RESTRICTED_SYMMETRIC:
        pre_trace = 1
    else:
        pre_trace += 1
    end
    
    # depress synapse
    skip boolean = (nearest_neighbour_behaviour == NEAREST_NEIGHBOUR_RESTRICTED_SYMMETRIC) and (not pre_handled)    # skip depression if no postsynaptic spikes were handled since last pre spike
    if not skip:
        w_ nS = Wmax * ( w / Wmax  - ( alpha * lambda * ( w / Wmax )**mu_minus * post_trace ))
        w = max(Wmin, w_)
    end

    pre_handled = False
    
    # deliver spike to postsynaptic partner
    deliver_spike(w, the_delay)
  end
end
